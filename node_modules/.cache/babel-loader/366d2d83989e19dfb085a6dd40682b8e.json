{"ast":null,"code":"var _jsxFileName = \"/Users/kiichirosuganuma/Desktop/dev/real-sns/frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useReducer } from \"react\";\nimport AuthReducer from \"./AuthReducer\"; //最初のユーザー状態の定義\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  // user: null, //ログインしてないですね。\n  // user: {\n  //   _id: \"62301ab54ded0ed0584598e4\",\n  //   username: \"shincode\",\n  //   email: \"shincode@gmail.com\",\n  //   password: \"abcdefg\",\n  //   profilePicture: \"/person/1.jpeg\",\n  //   coverPicture: \"\",\n  //   followers: [],\n  //   followings: [],\n  //   isAdmin: false,\n  // },\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  isFetching: false,\n  //ログインしようともしてないですね。\n  error: false //エラーも吐いてないですね。\n\n};\nexport const AuthContext = /*#__PURE__*/createContext(initialState);\nexport const AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //ユーザー入力によって状態(state)が更新され、それをグローバルに利用している。\n  const [state, dispatch] = useReducer(AuthReducer, initialState); //set user data in localstroge\n\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }, [state.user]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      isFetching: state.isFetching,\n      error: state.error,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/kiichirosuganuma/Desktop/dev/real-sns/frontend/src/context/AuthContext.js"],"names":["createContext","useEffect","useReducer","AuthReducer","initialState","user","JSON","parse","localStorage","getItem","isFetching","error","AuthContext","AuthContextProvider","children","state","dispatch","setItem","stringify"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,UAAnC,QAAqD,OAArD;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,IAb/B;AAcnBC,EAAAA,UAAU,EAAE,KAdO;AAcA;AACnBC,EAAAA,KAAK,EAAE,KAfY,CAeL;;AAfK,CAArB;AAkBA,OAAO,MAAMC,WAAW,gBAAGZ,aAAa,CAACI,YAAD,CAAjC;AAEP,OAAO,MAAMS,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACnD;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACC,WAAD,EAAcC,YAAd,CAApC,CAFmD,CAInD;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,YAAY,CAACS,OAAb,CAAqB,MAArB,EAA6BX,IAAI,CAACY,SAAL,CAAeH,KAAK,CAACV,IAArB,CAA7B;AACD,GAFQ,EAEN,CAACU,KAAK,CAACV,IAAP,CAFM,CAAT;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,IAAI,EAAEU,KAAK,CAACV,IADP;AAELK,MAAAA,UAAU,EAAEK,KAAK,CAACL,UAFb;AAGLC,MAAAA,KAAK,EAAEI,KAAK,CAACJ,KAHR;AAILK,MAAAA;AAJK,KADT;AAAA,cAQGF;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CArBM;;GAAMD,mB;;KAAAA,mB","sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\r\nimport AuthReducer from \"./AuthReducer\";\r\n\r\n//最初のユーザー状態の定義\r\nconst initialState = {\r\n  // user: null, //ログインしてないですね。\r\n  // user: {\r\n  //   _id: \"62301ab54ded0ed0584598e4\",\r\n  //   username: \"shincode\",\r\n  //   email: \"shincode@gmail.com\",\r\n  //   password: \"abcdefg\",\r\n  //   profilePicture: \"/person/1.jpeg\",\r\n  //   coverPicture: \"\",\r\n  //   followers: [],\r\n  //   followings: [],\r\n  //   isAdmin: false,\r\n  // },\r\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n  isFetching: false, //ログインしようともしてないですね。\r\n  error: false, //エラーも吐いてないですね。\r\n};\r\n\r\nexport const AuthContext = createContext(initialState);\r\n\r\nexport const AuthContextProvider = ({ children }) => {\r\n  //ユーザー入力によって状態(state)が更新され、それをグローバルに利用している。\r\n  const [state, dispatch] = useReducer(AuthReducer, initialState);\r\n\r\n  //set user data in localstroge\r\n  useEffect(() => {\r\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n  }, [state.user]);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: state.user,\r\n        isFetching: state.isFetching,\r\n        error: state.error,\r\n        dispatch,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}