{"ast":null,"code":"var _jsxFileName = \"/Users/kiichirosuganuma/Desktop/dev/real-sns/frontend/src/components/timeline/Timeline.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport \"./Timeline.css\";\nimport Share from \"../share/Share\";\nimport Post from \"../post/Post\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\"; // export default function Timeline({ username, gridView = false }) {\n//   const [posts, setPosts] = useState([]);\n//   const { user } = useContext(AuthContext);\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       try {\n//         const response = username\n//           ? await axios.get(`/posts/profile/${username}`) // profile の場合\n//           : await axios.get(`/posts/timeline/${user._id}`); // home\n//         console.log(response.data); // デバッグのために取得したデータをログに出力\n//         setPosts(response.data); // 取得したデータを state に保存\n//       } catch (error) {\n//         // エラーハンドリングの強化\n//         console.error(\n//           \"Error fetching posts:\",\n//           error.response ? error.response.data : error.message\n//         );\n//       }\n//     };\n//     fetchPosts();\n//   }, [username, user._id]); // usernameが変更されるたびにデータを再取得\n//   return (\n//     <div className=\"timeline\">\n//       <div className={`timelineWrapper ${gridView ? \"gridView\" : \"\"}`}>\n//         <Share />\n//         {posts.map((post) => (\n//           <div className=\"postWrapper\" key={post._id}>\n//             <Post post={post} />\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timeline(_ref) {\n  _s();\n\n  let {\n    username,\n    gridView = false,\n    showShare = true\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n  const {\n    user\n  } = useContext(AuthContext);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = username ? await axios.get(`/posts/profile/${username}`) // profile の場合\n        : await axios.get(`/posts/timeline/${user._id}`); // home\n\n        setPosts(response.data); // 取得したデータを state に保存\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error.response ? error.response.data : error.message);\n      }\n    };\n\n    fetchPosts();\n  }, [username, user._id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `timelineWrapper ${gridView ? \"gridView\" : \"\"}`,\n      children: [showShare && /*#__PURE__*/_jsxDEV(Share, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postWrapper\",\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timeline, \"omHF6PJyNAaQxhbtLbXyaS78q/s=\");\n\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/Users/kiichirosuganuma/Desktop/dev/real-sns/frontend/src/components/timeline/Timeline.jsx"],"names":["React","useContext","useEffect","useState","Share","Post","axios","AuthContext","Timeline","username","gridView","showShare","posts","setPosts","user","fetchPosts","response","get","_id","data","error","console","message","map","post"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAO,gBAAP;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,2BAA5B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,QAAT,OAIZ;AAAA;;AAAA,MAJ8B;AAC/BC,IAAAA,QAD+B;AAE/BC,IAAAA,QAAQ,GAAG,KAFoB;AAG/BC,IAAAA,SAAS,GAAG;AAHmB,GAI9B;AACD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAWb,UAAU,CAACM,WAAD,CAA3B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,QAAQ,GAAGP,QAAQ,GACrB,MAAMH,KAAK,CAACW,GAAN,CAAW,kBAAiBR,QAAS,EAArC,CADe,CACyB;AADzB,UAErB,MAAMH,KAAK,CAACW,GAAN,CAAW,mBAAkBH,IAAI,CAACI,GAAI,EAAtC,CAFV,CADE,CAGkD;;AACpDL,QAAAA,QAAQ,CAACG,QAAQ,CAACG,IAAV,CAAR,CAJE,CAIuB;AAC1B,OALD,CAKE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CACE,uBADF,EAEEA,KAAK,CAACJ,QAAN,GAAiBI,KAAK,CAACJ,QAAN,CAAeG,IAAhC,GAAuCC,KAAK,CAACE,OAF/C;AAID;AACF,KAZD;;AAaAP,IAAAA,UAAU;AACX,GAfQ,EAeN,CAACN,QAAD,EAAWK,IAAI,CAACI,GAAhB,CAfM,CAAT;AAiBA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAG,mBAAkBR,QAAQ,GAAG,UAAH,GAAgB,EAAG,EAA9D;AAAA,iBACGC,SAAS,iBAAI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cADhB,EAEGC,KAAK,CAACW,GAAN,CAAWC,IAAD,iBACT;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEA;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF,SAAkCA,IAAI,CAACN,GAAvC;AAAA;AAAA;AAAA;AAAA,cADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GArCuBV,Q;;KAAAA,Q","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport \"./Timeline.css\";\nimport Share from \"../share/Share\";\nimport Post from \"../post/Post\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\n\n// export default function Timeline({ username, gridView = false }) {\n//   const [posts, setPosts] = useState([]);\n//   const { user } = useContext(AuthContext);\n\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       try {\n//         const response = username\n//           ? await axios.get(`/posts/profile/${username}`) // profile の場合\n//           : await axios.get(`/posts/timeline/${user._id}`); // home\n//         console.log(response.data); // デバッグのために取得したデータをログに出力\n//         setPosts(response.data); // 取得したデータを state に保存\n//       } catch (error) {\n//         // エラーハンドリングの強化\n//         console.error(\n//           \"Error fetching posts:\",\n//           error.response ? error.response.data : error.message\n//         );\n//       }\n//     };\n//     fetchPosts();\n//   }, [username, user._id]); // usernameが変更されるたびにデータを再取得\n\n//   return (\n//     <div className=\"timeline\">\n//       <div className={`timelineWrapper ${gridView ? \"gridView\" : \"\"}`}>\n//         <Share />\n//         {posts.map((post) => (\n//           <div className=\"postWrapper\" key={post._id}>\n//             <Post post={post} />\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\nexport default function Timeline({\n  username,\n  gridView = false,\n  showShare = true,\n}) {\n  const [posts, setPosts] = useState([]);\n  const { user } = useContext(AuthContext);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = username\n          ? await axios.get(`/posts/profile/${username}`) // profile の場合\n          : await axios.get(`/posts/timeline/${user._id}`); // home\n        setPosts(response.data); // 取得したデータを state に保存\n      } catch (error) {\n        console.error(\n          \"Error fetching posts:\",\n          error.response ? error.response.data : error.message\n        );\n      }\n    };\n    fetchPosts();\n  }, [username, user._id]);\n\n  return (\n    <div className=\"timeline\">\n      <div className={`timelineWrapper ${gridView ? \"gridView\" : \"\"}`}>\n        {showShare && <Share />}\n        {posts.map((post) => (\n          <div className=\"postWrapper\" key={post._id}>\n            <Post post={post} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}